import pyopencl as cl
import numpy as np
import torch
np.random.seed(1234)
torch.manual_seed(1234) 
import torch.nn.functional as F


# Set up OpenCL context
platform = cl.get_platforms()[0]
device = platform.get_devices()[0]
context = cl.Context([device])
queue = cl.CommandQueue(context)

input = torch.randn(1,1,32,32)
wt = torch.randn(32,1,3,3)
a=input.detach().numpy()
b=wt.detach().numpy()
c= np.zeros([1,32,30,30])

A=np.reshape(a,-1).astype(np.float32)
B=np.reshape(b,-1).astype(np.float32)
C= np.zeros([1,32,30,30],dtype=np.float32).flatten()



A_buf = cl.Buffer(context, cl.mem_flags.READ_ONLY | cl.mem_flags.COPY_HOST_PTR, hostbuf=A)
B_buf = cl.Buffer(context, cl.mem_flags.READ_ONLY | cl.mem_flags.COPY_HOST_PTR, hostbuf=B)
C_buf = cl.Buffer(context, cl.mem_flags.WRITE_ONLY, size=C.nbytes)

cl.enqueue_copy
# Define OpenCL kernel function
program = cl.Program(context, """
    __kernel void vec_add(__global const float* a, __global const float* b, __global float* c)
    {
        int N = get_global_id(0);
        int H= get_global_id(1);
        int W= get_global_id(2);
        int R = get_global_id(3);
        int S= get_global_id(4);

       int img_colm=32;
       int r_fltr=3;
       int c_fltr=3;
       int n_fltr=32;
       int S_row=30;
       int S_clm=30;
       float sum=0;
       int v=0;
       int filtr_size=9;


       for(int n=0;n<n_fltr;n++)
      {
        for(int h=0;h<S_row;h++)
        {
          for(int w=0;w<S_clm;w++)
          {
           for(int r=0;r<r_fltr;r++)
           {
             for(int s=0;s<c_fltr;s++)
              {
                sum+=b[(r*c_fltr)+s+(n*filtr_size)]*a[(h*img_colm)+(r*img_colm)+w+s];
               }

             }
              c[v]=sum;
              sum=0;
              v++;
          }

         }

       }
      
        
    }
""").build()



# Enqueue kernel for execution
global_size = (C.shape)
local_size = None
program.vec_add(queue, global_size, local_size, A_buf, B_buf, C_buf)

# Transfer result from GPU to CPU

cl.enqueue_copy(queue,C,C_buf)
C=np.reshape(C,(1,32,30,30))

# Print result
print("Result: ",C)
